{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Rosita-202/ROSA-L.A/blob/main/Rosa-Lenguajes\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 655
        },
        "id": "IC0yG2To7tfK",
        "outputId": "91148866-533f-452d-83bd-40d5a7343971"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Seleccione la operacion:\n",
            "1. Concatenacion\n",
            "4. Union\n",
            "5. Interseccion\n",
            "5\n",
            "Cadena para el conjunto A: a,d,f,e\n",
            "Cadena para el conjunto B: a,f,g,t\n",
            "Interseccion:  a,,f,\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import networkx as nx\n",
        "import matplotlib.pyplot as plt\n",
        "from itertools import product\n",
        "\n",
        "class Conjunto:\n",
        "    def __init__(self, cadena=\"\"):\n",
        "        self.cadena = cadena\n",
        "\n",
        "def concatenacion_conjunto(A, B):\n",
        "    resultado = Conjunto()\n",
        "\n",
        "    for cA, cB in product(A.cadena, B.cadena):\n",
        "        resultado.cadena += cA + cB + \",\"\n",
        "\n",
        "    return resultado\n",
        "\n",
        "def union_conjunto(A, B):\n",
        "    resultado = Conjunto(A.cadena)\n",
        "\n",
        "    for c in B.cadena:\n",
        "        if c not in resultado.cadena:\n",
        "            resultado.cadena += c\n",
        "\n",
        "    return resultado\n",
        "\n",
        "def interseccion_conjunto(A, B):\n",
        "    resultado = Conjunto()\n",
        "\n",
        "    for c in A.cadena:\n",
        "        if c in B.cadena:\n",
        "            resultado.cadena += c\n",
        "\n",
        "    return resultado\n",
        "\n",
        "def imprimir_conjunto(conjunto, mensaje):\n",
        "    print(mensaje, conjunto.cadena)\n",
        "\n",
        "def realizar_operacion(opcion, conjunto_A, conjunto_B=None):\n",
        "    resultado = Conjunto()\n",
        "\n",
        "    if opcion == 1:\n",
        "        resultado = concatenacion_conjunto(conjunto_A, conjunto_B)\n",
        "        imprimir_conjunto(resultado, \"Concatenacion: \")\n",
        "        visualizar_grafo(resultado.cadena)\n",
        "    elif opcion == 4:\n",
        "        resultado = union_conjunto(conjunto_A, conjunto_B)\n",
        "        imprimir_conjunto(resultado, \"Union: \")\n",
        "        visualizar_grafo(resultado.cadena)\n",
        "    elif opcion == 5:\n",
        "        resultado = interseccion_conjunto(conjunto_A, conjunto_B)\n",
        "        imprimir_conjunto(resultado, \"Interseccion: \")\n",
        "        visualizar_grafo(resultado.cadena)\n",
        "\n",
        "def visualizar_grafo(cadena):\n",
        "    G = nx.Graph()\n",
        "\n",
        "    for i in range(len(cadena) - 1):\n",
        "        G.add_edge(cadena[i], cadena[i + 1])\n",
        "\n",
        "    nx.draw(G, with_labels=True, font_weight='bold')\n",
        "    plt.show()\n",
        "\n",
        "def mostrar_interfaz_texto():\n",
        "    print(\"Seleccione la operacion:\")\n",
        "    print(\"1. Concatenacion\")\n",
        "    print(\"4. Union\")\n",
        "    print(\"5. Interseccion\")\n",
        "\n",
        "    opcion = int(input())\n",
        "\n",
        "    conjunto_A = Conjunto(input(\"Cadena para el conjunto A: \"))\n",
        "\n",
        "    if opcion in [1, 4, 5]:\n",
        "        conjunto_B = Conjunto(input(\"Cadena para el conjunto B: \"))\n",
        "    else:\n",
        "        conjunto_B = None\n",
        "\n",
        "    realizar_operacion(opcion, conjunto_A, conjunto_B)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    mostrar_interfaz_texto()"
      ]
    }
  ]
}